0 info it worked if it ends with ok
1 verbose cli [ '/home/ubuntu/.nvm/versions/node/v4.6.1/bin/node',
1 verbose cli   '/home/ubuntu/.nvm/versions/node/v4.6.1/bin/npm',
1 verbose cli   'publish',
1 verbose cli   './' ]
2 info using npm@2.15.9
3 info using node@v4.6.1
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec Result {
7 silly cache add   raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/home/ubuntu/workspace/godsend',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/ubuntu/.npm/godsend/0.1.3/package.tgz not in flight; packing
9 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/home/ubuntu/.npm/godsend/0.1.3/package.tgz',
10 verbose tar pack   '/home/ubuntu/workspace/godsend' ]
11 verbose tarball /home/ubuntu/.npm/godsend/0.1.3/package.tgz
12 verbose folder /home/ubuntu/workspace/godsend
13 info prepublish godsend@0.1.3
14 verbose addLocalTarball adding from inside cache /home/ubuntu/.npm/godsend/0.1.3/package.tgz
15 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd godsend@0.1.3
17 verbose afterAdd /home/ubuntu/.npm/godsend/0.1.3/package/package.json not in flight; writing
18 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /home/ubuntu/.npm/godsend/0.1.3/package/package.json written
20 silly publish { name: 'godsend',
20 silly publish   version: '0.1.3',
20 silly publish   description: 'Godsend: simple and elegant messaging for microservices.',
20 silly publish   main: 'main.js',
20 silly publish   scripts: { start: 'node test/main.js' },
20 silly publish   dependencies:
20 silly publish    { express: '4.15.2',
20 silly publish      'helios-kernel': '0.9.7',
20 silly publish      'js-logger': '1.3.0',
20 silly publish      minimist: '1.2.0',
20 silly publish      'node-uuid': '1.4.7',
20 silly publish      proclaim: '3.4.4',
20 silly publish      'serve-index': '1.8.0',
20 silly publish      'socket.io': '1.7.3',
20 silly publish      'socket.io-client': '1.7.3' },
20 silly publish   devDependencies: { tape: '4.6.3' },
20 silly publish   engines: { node: '4.6.x' },
20 silly publish   keywords:
20 silly publish    [ 'microservice',
20 silly publish      'microservices',
20 silly publish      'messaging',
20 silly publish      'message-bus',
20 silly publish      'message-broker' ],
20 silly publish   author: { name: 'Philip Weaver' },
20 silly publish   contributors: [],
20 silly publish   readme: '# Godsend\nSimple and elegant messaging for microservices\n\n### Key Features\n\n- A clean, concise, yet expressive API\n- Property-based message patterns.\n- Mutable composition: inject message receivers from any location in your project to decouple concerns such as validation and transformation.\n- Multiple message receivers are able to process, filter, and transform a particular message request in a controlled, composed order.\n- The secure messaging exchange learns authorization automatically (with exercise).\n- Message receivers may be versioned according to the connected user. Receiver versions are dynamically substituted in the receiver list upon each user\'s request.\n- Few assumptions\n\t- Universal/isomorphic (in the browser and in Node.js)\n\t- The messaging scheme is totally open and configurable per receiver and is not necessary predetermined to use wildcards or regular expressions for pattern matching. But you can. The default and intended scheme is to match multiple property/value pairs within an object.\n\n### Getting Started\n\nWhen loading client pages in your browser, check the JavaScript console for message output.\n\n\te.g. http://127.0.0.1/examples/\n\nhttps://www.notion.so/Messaging-30c17b4e590f44689d9571f1f1f690c0\n\n- This project is not currently suitable for production.\n- Security, error handling, and fault tolerance need more evaluation.\n\n### Public Development @ Cloud9\n\n[Cloud9 Preview](https://preview.c9users.io/philmaker/messaging/godsend/)\n\n[Sign-in | Cloud9 IDE - Ajax.org](https://ide.c9.io/philmaker/messaging)\n\n### Examples\n\n### Create a bus to connect to\n\n\tthis.bus = new Bus({\n\t\t...\n\t});\n\n### Connect to the bus initially as a public user\n\n\tthis.bus.connect({\n\t\tcredentials : {\n\t\t\tusername : \'client-public\',\n\t\t\tpassphrase : \'\'\n\t\t},\n\t\tresponded : function(result) {\n\t\t\tif (result.errors) {\n\t\t\t\tconsole.log(result.errors);\n\t\t\t} else {\n\t\t\t\tthis.connection = result.connection;\n\t\t\t\tthis.initializeServices();\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\n### Change the credentials to become an admin user \n\n\tthis.connection.send({\n\t\tpattern : {\n\t\t\ttopic : \'signin\'\n\t\t},\n\t\tdata : {\n\t\t\tcredentials : {\n\t\t\t\tusername : \'client-admin\',\n\t\t\t\tpassphrase : Utility.digest(\'passphrase-to-hash\')\n\t\t\t}\n\t\t},\n\t\treceive : function(result) {\n\t\t\tif (result.final) {\n\t\t\t\tthis.console.log(\'Result after attempting to sign in: \' + JSON.stringify(result));\n\t\t\t\tsequence.next();\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\t\n\n### Create a new user which defines the user\'s authorized capabilities\n\n\tthis.connection.send({\n\t\tpattern : {\n\t\t\ttopic : \'store\',\n\t\t\taction : \'put\',\n\t\t\tcollection : \'users\'\n\t\t},\n\t\tdata : {\n\t\t\tkey : \'client-alpha\',\n\t\t\tvalue : {\n\t\t\t\tcredentials : {\n\t\t\t\t\tusername : \'client-alpha\',\n\t\t\t\t\tpassphrase : Utility.digest(\'passphrase-to-hash\')\n\t\t\t\t},\n\t\t\t\tpatterns : {\n\t\t\t\t\tsendable : [{\n\t\t\t\t\t\ttopic : \'register\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'signin\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'signout\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'find\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'put\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'get\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'create\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'read\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'update\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttopic : \'store\',\n\t\t\t\t\t\taction : \'delete\',\n\t\t\t\t\t\tcollection : \'tasks\'\n\t\t\t\t\t}],\n\t\t\t\t\treceivable : []\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\treceive : function(result) {\n\t\t\tif (result.final) {\n\t\t\t\tthis.console.log(\'Added a new user: \' + JSON.stringify(result));\n\t\t\t\tsequence.next();\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\n### Intercept and validate the request to store a user by validating the request data\n\n\tthis.connection.receive({\n\t\tid : \'store-validate-user\',\n\t\tbefore : \'store-put\',\n\t\ton : function(request, response) {\n\t\t\tif (request.matches({\n\t\t\t\ttopic : \'store\',\n\t\t\t\taction : \'put\',\n\t\t\t\tcollection : \'users\'\n\t\t\t})) {\n\t\t\t\trequest.accept();\n\t\t\t} else {\n\t\t\t\trequest.skip();\n\t\t\t}\n\t\t},\n\t\trun : function(request, response) {\n\t\t\tif (valid) {\n\t\t\t\trequest.next();\n\t\t\t} else {\n\t\t\t\tresponse.respond({\n\t\t\t\t\terror : \'The user is invalid.\'\n\t\t\t\t});\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\n### Spawn a new client connection as a public user\n\n\tthis.bus.main.connect({\n\t\tcredentials : {\n\t\t\tusername : \'client-public\',\n\t\t\tpassphrase : \'\'\n\t\t},\n\t\tconnected : function(properties) {\n\t\t\tthis.connection = properties.connection;\n\t\t\tthis.initializeServices();\n\t\t}.bind(this)\n\t});\n\n### Change the client connection\'s credentials to become the newly created user \n\n\tthis.connection.send({\n\t\tpattern : {\n\t\t\ttopic : \'signin\'\n\t\t},\n\t\tdata : {\n\t\t\tcredentials : {\n\t\t\t\tusername : \'client-alpha\',\n\t\t\t\tpassphrase : \'\'\n\t\t\t}\n\t\t},\n\t\treceive : function(result) {\n\t\t\tif (result.final) {\n\t\t\t\tthis.console.log(\'Client result after attempting to signin: \' + JSON.stringify(properties));\n\t\t\t\tsequence.next();\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\t\n\n### Send a message to store a task\n\n\tthis.connection.send({\n\t\tpattern : {\n\t\t\ttopic : \'store\',\n\t\t\taction : \'put\',\n\t\t\tcollection : \'tasks\'\n\t\t},\n\t\tdata : {\n\t\t\tkey : uuid.v4(),\n\t\t\tvalue : {\n\t\t\t\tsubject : \'New Task\'\n\t\t\t}\n\t\t},\n\t\treceive : function(result) {\n\t\t\tif (result.final) {\n\t\t\t\tthis.console.log(\'Client result after attempting to put a new task: \' + JSON.stringify(result));\n\t\t\t\tthis.task = result.value;\n\t\t\t\tthis.console.log(\'This is the new task: \' + JSON.stringify(this.task.value));\n\t\t\t\tsequence.next();\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\n### Receive a message to store data to any named collection\n\n\tthis.connection.receive({\n\t\tid : \'store-put\',\n\t\ton : function(request, response) {\n\t\t\tif (request.matches({\n\t\t\t\ttopic : \'store\',\n\t\t\t\taction : \'put\'\n\t\t\t})) {\n\t\t\t\trequest.accept();\n\t\t\t} else {\n\t\t\t\trequest.skip();\n\t\t\t}\n\t\t}.bind(this),\n\t\trun : function(request, response) {\n\t\t\tstorage.put({\n\t\t\t\tcollection : request.pattern.collection,\n\t\t\t\tkey : request.data.key,\n\t\t\t\tvalue : request.data.value,\n\t\t\t\tcallback : function(properties) {\n\t\t\t\t\tresponse.data = {\n\t\t\t\t\t\tkey : request.data.key,\n\t\t\t\t\t\tvalue : request.data.value\n\t\t\t\t\t};\n\t\t\t\t\trequest.next();\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t}.bind(this)\n\t});\n\t\n\n### Filter the request to store any data by adding a creation date or modification date\n\nThe property `before` inserts the receiver to execute before the data is stored.\n\n\tthis.connection.receive({\n\t\tid : \'store-transform-date\',\n\t\tbefore : \'store-put\',\n\t\ton : function(request, response) {\n\t\t\tif (request.matches({\n\t\t\t\ttopic : \'store\',\n\t\t\t\taction : \'put\'\n\t\t\t})) {\n\t\t\t\trequest.accept();\n\t\t\t} else {\n\t\t\t\trequest.skip();\n\t\t\t}\n\t\t},\n\t\trun : function(request, response) {\n\t\t\tstorage.get({\n\t\t\t\tcollection : request.pattern.collection,\n\t\t\t\tkey : request.data.key,\n\t\t\t\tcallback : function(properties) {\n\t\t\t\t\tvar value = properties.value;\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\trequest.data.value.modified = new Date();\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.data.value.created = new Date();\n\t\t\t\t\t}\n\t\t\t\t\tstorage.put({\n\t\t\t\t\t\tcollection : request.pattern.collection,\n\t\t\t\t\t\tkey : request.data.key,\n\t\t\t\t\t\tvalue : request.data.value,\n\t\t\t\t\t\tcallback : function(properties) {\n\t\t\t\t\t\t\trequest.next();\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t}.bind(this)\n\t});\n\n### Filter a request to store task data by validating the request\'s data\n\n\tthis.connection.receive({\n\t\tid : \'store-validate-task\',\n\t\tbefore : \'store-put\',\n\t\ton : function(request, response) {\n\t\t\tif (request.matches({\n\t\t\t\ttopic : \'store\',\n\t\t\t\taction : \'put\',\n\t\t\t\tcollection : \'tasks\'\n\t\t\t})) {\n\t\t\t\trequest.accept();\n\t\t\t} else {\n\t\t\t\trequest.skip();\n\t\t\t}\n\t\t},\n\t\trun : function(request, response) {\n\t\t\tif (valid) {\n\t\t\t\trequest.next();\n\t\t\t} else {\n\t\t\t\tresponse.respond({\n\t\t\t\t\terror : \'The task is invalid.\'\n\t\t\t\t});\n\t\t\t}\n\t\t}.bind(this)\n\t});\n\n### Send a request for a particular version of a receiver\n\n\t\n\n### Broadcast changes in real time after altering data in storage\n\nAdd a receiver to run `after` data has been put in a storage collection.\n\n\t\n\n### Mutate a received request and resend to a new route pattern on the bus\n\n\t\n\n### Clone a received request, mutate, and resend to a new route pattern on the bus\n\n\t\n\n### Clone a received request, mutate, and resend to a new route pattern on a different bus\n\n',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   gitHead: '1fb93ff45bc8708741a394af49ebd426e9b28f15',
20 silly publish   _id: 'godsend@0.1.3',
20 silly publish   _shasum: '131423bba9c5aa190c5ccd77c705f74ccfc47a53',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name godsend
23 silly mapToRegistry using default registry
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'godsend',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'godsend',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/godsend
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /home/ubuntu/.npm/godsend/0.1.3/package.tgz
29 verbose request uri https://registry.npmjs.org/godsend
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 7:42:57 AM
32 verbose request using bearer token for auth
33 verbose request id 8b4e8fa3bc0de42d
34 http request PUT https://registry.npmjs.org/godsend
35 http 403 https://registry.npmjs.org/godsend
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Sun, 12 Mar 2017 07:42:58 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-ord1744-ORD',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1489304577.852975,VS0,VE1051',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /home/ubuntu/.npm/registry.npmjs.org/godsend on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 0.1.3." : godsend
39 verbose stack     at makeError (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/request/request.js:200:22)
39 verbose stack     at emitTwo (events.js:87:13)
39 verbose stack     at Request.emit (events.js:172:7)
39 verbose stack     at Request.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/request/request.js:1067:10)
39 verbose stack     at emitOne (events.js:82:20)
39 verbose stack     at Request.emit (events.js:169:7)
39 verbose stack     at IncomingMessage.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.6.1/lib/node_modules/npm/node_modules/request/request.js:988:12)
40 verbose statusCode 403
41 verbose pkgid godsend
42 verbose cwd /home/ubuntu/workspace/godsend
43 error Linux 4.8.8-c9
44 error argv "/home/ubuntu/.nvm/versions/node/v4.6.1/bin/node" "/home/ubuntu/.nvm/versions/node/v4.6.1/bin/npm" "publish" "./"
45 error node v4.6.1
46 error npm  v2.15.9
47 error code E403
48 error "You cannot publish over the previously published version 0.1.3." : godsend
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
